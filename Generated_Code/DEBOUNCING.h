/* ###################################################################
**     This component module is generated by Processor Expert. Do not modify it.
**     Filename    : DEBOUNCING.h
**     Project     : EA076_final_proj
**     Processor   : MKL25Z128VLK4
**     Component   : Wait
**     Version     : Component 01.083, Driver 01.00, CPU db: 3.00.000
**     Compiler    : GNU C Compiler
**     Date/Time   : 2019-06-17, 17:24, # CodeGen: 34
**     Abstract    :
**          Implements busy waiting routines.
**     Settings    :
**          Component name                                 : DEBOUNCING
**          Manual Clock Values                            : Disabled
**          Delay100usFunction                             : Delay100US
**          RTOS                                           : Disabled
**          Watchdog                                       : Disabled
**     Contents    :
**         Wait10Cycles   - void DEBOUNCING_Wait10Cycles(void);
**         Wait100Cycles  - void DEBOUNCING_Wait100Cycles(void);
**         WaitCycles     - void DEBOUNCING_WaitCycles(uint16_t cycles);
**         WaitLongCycles - void DEBOUNCING_WaitLongCycles(uint32_t cycles);
**         Waitms         - void DEBOUNCING_Waitms(uint16_t ms);
**         Init           - void DEBOUNCING_Init(void);
**         DeInit         - void DEBOUNCING_DeInit(void);
**
**Copyright : 1997 - 2015 Freescale Semiconductor, Inc. 
**All Rights Reserved.
**
**Redistribution and use in source and binary forms, with or without modification,
**are permitted provided that the following conditions are met:
**
**o Redistributions of source code must retain the above copyright notice, this list
**  of conditions and the following disclaimer.
**
**o Redistributions in binary form must reproduce the above copyright notice, this
**  list of conditions and the following disclaimer in the documentation and/or
**  other materials provided with the distribution.
**
**o Neither the name of Freescale Semiconductor, Inc. nor the names of its
**  contributors may be used to endorse or promote products derived from this
**  software without specific prior written permission.
**
**THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
**ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
**WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
**DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
**ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
**(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
**LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
**ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
**(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
**SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
**
**http: www.freescale.com
**mail: support@freescale.com
** ###################################################################*/
/*!
** @file DEBOUNCING.h
** @version 01.00
** @brief
**          Implements busy waiting routines.
*/         
/*!
**  @addtogroup DEBOUNCING_module DEBOUNCING module documentation
**  @{
*/         

#ifndef __DEBOUNCING_H
#define __DEBOUNCING_H

/* MODULE DEBOUNCING. */
#include "MCUC1.h" /* SDK and API used */
#include "DEBOUNCINGconfig.h" /* configuration */

/* other includes needed */
#if DEBOUNCING_CONFIG_USE_RTOS_WAIT
  /* include RTOS header files */
  #include "McuRTOS.h"
  #include "FreeRTOS.h" /* for vTaskDelay() */
  #include "task.h"
#endif

#ifdef __cplusplus
extern "C" {
#endif


#if MCUC1_CONFIG_SDK_VERSION_USED == MCUC1_CONFIG_SDK_PROCESSOR_EXPERT
  #define DEBOUNCING_INSTR_CLOCK_HZ       CPU_CORE_CLK_HZ /* for Kinetis, use core clock as base for instruction execution */
#else
  extern uint32_t SystemCoreClock; /* clock frequency variable defined system_<device>.h of the SDK */
  #define DEBOUNCING_INSTR_CLOCK_HZ       SystemCoreClock  /* core clock frequency in Hz */
#endif
#define DEBOUNCING_NofCyclesMs(ms, hz)  ((ms)*((hz)/1000)) /* calculates the needed cycles based on bus clock frequency */
#define DEBOUNCING_NofCyclesUs(us, hz)  ((us)*(((hz)/1000)/1000)) /* calculates the needed cycles based on bus clock frequency */
#define DEBOUNCING_NofCyclesNs(ns, hz)  (((ns)*(((hz)/1000)/1000))/1000) /* calculates the needed cycles based on bus clock frequency */

#define DEBOUNCING_WAIT_C(cycles) \
     ( (cycles)<=10 ? \
          DEBOUNCING_Wait10Cycles() \
        : DEBOUNCING_WaitCycles((uint16_t)cycles) \
      )                                      /*!< wait for some cycles */


void DEBOUNCING_Wait10Cycles(void);
/*
** ===================================================================
**     Method      :  DEBOUNCING_Wait10Cycles (component Wait)
**     Description :
**         Wait for 10 CPU cycles.
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/

void DEBOUNCING_Wait100Cycles(void);
/*
** ===================================================================
**     Method      :  DEBOUNCING_Wait100Cycles (component Wait)
**     Description :
**         Wait for 100 CPU cycles.
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/

void DEBOUNCING_WaitCycles(uint16_t cycles);
/*
** ===================================================================
**     Method      :  DEBOUNCING_WaitCycles (component Wait)
**     Description :
**         Wait for a specified number of CPU cycles (16bit data type).
**     Parameters  :
**         NAME            - DESCRIPTION
**         cycles          - The number of cycles to wait.
**     Returns     : Nothing
** ===================================================================
*/

void DEBOUNCING_Waitms(uint16_t ms);
/*
** ===================================================================
**     Method      :  DEBOUNCING_Waitms (component Wait)
**     Description :
**         Wait for a specified time in milliseconds.
**     Parameters  :
**         NAME            - DESCRIPTION
**         ms              - How many milliseconds the function has to
**                           wait
**     Returns     : Nothing
** ===================================================================
*/

void DEBOUNCING_WaitLongCycles(uint32_t cycles);
/*
** ===================================================================
**     Method      :  DEBOUNCING_WaitLongCycles (component Wait)
**     Description :
**         Wait for a specified number of CPU cycles (32bit data type).
**     Parameters  :
**         NAME            - DESCRIPTION
**         cycles          - The number of cycles to wait.
**     Returns     : Nothing
** ===================================================================
*/

void DEBOUNCING_Init(void);
/*
** ===================================================================
**     Method      :  DEBOUNCING_Init (component Wait)
**     Description :
**         Driver initialization routine.
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/

void DEBOUNCING_DeInit(void);
/*
** ===================================================================
**     Method      :  DEBOUNCING_DeInit (component Wait)
**     Description :
**         Driver de-initialization routine
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/

/* END DEBOUNCING. */

#ifdef __cplusplus
}  /* extern "C" */
#endif

#endif
/* ifndef __DEBOUNCING_H */
/*!
** @}
*/
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.5 [05.21]
**     for the Freescale Kinetis series of microcontrollers.
**
** ###################################################################
*/
